/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hliangzhao/LearnGo/15-crd-demo/pkg/apis/crddemo/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyDemoLister helps list MyDemos.
// All objects returned here must be treated as read-only.
type MyDemoLister interface {
	// List lists all MyDemos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyDemo, err error)
	// MyDemos returns an object that can list and get MyDemos.
	MyDemos(namespace string) MyDemoNamespaceLister
	MyDemoListerExpansion
}

// myDemoLister implements the MyDemoLister interface.
type myDemoLister struct {
	indexer cache.Indexer
}

// NewMyDemoLister returns a new MyDemoLister.
func NewMyDemoLister(indexer cache.Indexer) MyDemoLister {
	return &myDemoLister{indexer: indexer}
}

// List lists all MyDemos in the indexer.
func (s *myDemoLister) List(selector labels.Selector) (ret []*v1.MyDemo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyDemo))
	})
	return ret, err
}

// MyDemos returns an object that can list and get MyDemos.
func (s *myDemoLister) MyDemos(namespace string) MyDemoNamespaceLister {
	return myDemoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyDemoNamespaceLister helps list and get MyDemos.
// All objects returned here must be treated as read-only.
type MyDemoNamespaceLister interface {
	// List lists all MyDemos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyDemo, err error)
	// Get retrieves the MyDemo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.MyDemo, error)
	MyDemoNamespaceListerExpansion
}

// myDemoNamespaceLister implements the MyDemoNamespaceLister
// interface.
type myDemoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyDemos in the indexer for a given namespace.
func (s myDemoNamespaceLister) List(selector labels.Selector) (ret []*v1.MyDemo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyDemo))
	})
	return ret, err
}

// Get retrieves the MyDemo from the indexer for a given namespace and name.
func (s myDemoNamespaceLister) Get(name string) (*v1.MyDemo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mydemo"), name)
	}
	return obj.(*v1.MyDemo), nil
}
