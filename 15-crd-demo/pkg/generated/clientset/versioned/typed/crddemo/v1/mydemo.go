/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/hliangzhao/LearnGo/15-crd-demo/pkg/apis/crddemo/v1"
	scheme "github.com/hliangzhao/LearnGo/15-crd-demo/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MyDemosGetter has a method to return a MyDemoInterface.
// A group's client should implement this interface.
type MyDemosGetter interface {
	MyDemos(namespace string) MyDemoInterface
}

// MyDemoInterface has methods to work with MyDemo resources.
type MyDemoInterface interface {
	Create(ctx context.Context, myDemo *v1.MyDemo, opts metav1.CreateOptions) (*v1.MyDemo, error)
	Update(ctx context.Context, myDemo *v1.MyDemo, opts metav1.UpdateOptions) (*v1.MyDemo, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.MyDemo, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.MydemoList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.MyDemo, err error)
	MyDemoExpansion
}

// myDemos implements MyDemoInterface
type myDemos struct {
	client rest.Interface
	ns     string
}

// newMyDemos returns a MyDemos
func newMyDemos(c *CrddemoV1Client, namespace string) *myDemos {
	return &myDemos{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the myDemo, and returns the corresponding myDemo object, and an error if there is any.
func (c *myDemos) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.MyDemo, err error) {
	result = &v1.MyDemo{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("mydemos").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MyDemos that match those selectors.
func (c *myDemos) List(ctx context.Context, opts metav1.ListOptions) (result *v1.MydemoList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.MydemoList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("mydemos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested myDemos.
func (c *myDemos) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("mydemos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a myDemo and creates it.  Returns the server's representation of the myDemo, and an error, if there is any.
func (c *myDemos) Create(ctx context.Context, myDemo *v1.MyDemo, opts metav1.CreateOptions) (result *v1.MyDemo, err error) {
	result = &v1.MyDemo{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("mydemos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(myDemo).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a myDemo and updates it. Returns the server's representation of the myDemo, and an error, if there is any.
func (c *myDemos) Update(ctx context.Context, myDemo *v1.MyDemo, opts metav1.UpdateOptions) (result *v1.MyDemo, err error) {
	result = &v1.MyDemo{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("mydemos").
		Name(myDemo.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(myDemo).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the myDemo and deletes it. Returns an error if one occurs.
func (c *myDemos) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("mydemos").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *myDemos) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("mydemos").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched myDemo.
func (c *myDemos) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.MyDemo, err error) {
	result = &v1.MyDemo{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("mydemos").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
