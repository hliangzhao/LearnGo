package main

/*
二叉搜索树（BST）：对于任何一个节点，其左子树中的所有节点的元素小于自身，其右子树中的所有节点的元素都大于自身。
	查询和写入：复杂度为树的深度，即O(log(n))。最坏为O(n)。

自平衡二叉树（AVL）：在BST的基础上，保证左右子树的深度差为1。

红黑树：
	任意节点，要么是R，要么是B。
	root和null节点为B。
	R节点的自节点必须为B。
	显然一半以上的节点都是B。
	新插入的节点为R。但是在后续平衡的过程中，R可能变成B。

	"平衡"条件：从任意节点到叶子结点的路径上，B节点的个数要相同。这个平衡条件的上下界是什么？
		上界：两条路径的节点数相同（此时两条路径上都没有R节点）；
		下界：两条路径的节点数相差一倍（一条全黑，一条红黑交替）。

红黑树的平衡条件比AVL更宽松一些，这使得它所经历的变换少一些，从而写性能更高一些。

面试题：为什么TreeMap底层是红黑树而非AVL或者BST？
红黑树的平衡条件比AVL更宽松一些，这使得它所经历的变换少一些，从而写性能更高一些。此外，它仍然能保证读写的复杂度为log(n)。
*/
